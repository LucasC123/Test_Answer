from flask import Flask, request, jsonify, make_response
from flask_sqlalchemy import SQLAlchemy
import uuid
from werkzeug.security import generate_password_hash, check_passowrd_hash
import jwt
import datetime
from functools import wraps

app = Flast(__name__)

app.config['SECRET_KEY'] = 'thisIsSecret'
# need to change to the correct db location
app.config['SQLALCHEMY_DATABASE_URI'] = 'db_location'

db = SQLAlchemy(app)

class User(db.Model):
	id = db.Column(db.Integer, primary_key=True)
	public_id = db.Column(db.String(50), unique=True)
	name = db.Column(db.String(50))
	password = db.Column(db.String(80))
	admin = db.Column(db.Boolean)

class Shape(db.Model):
	id = db.Column(db.Integer, primary_key=True)
	shape_name = db.Column(db.String(50))
	complete = db.Column(db.Boolean)
	user_id = db.Column(db.Integer)

def token_required(f):
	@wraps(f)
	def decorated(*args, **kwargs):
		token = None
		
		if 'x-access-token' in request.headers:
			token = request.headers['x-access-token']

		if not token:
			return jsonify({'message': 'Token is missing!'}), 401

		try:
			data = jwt.decode(token, app.config['SECRET_KEY'])
			current_user = User.query.filter_by(public_id=data['public_id']).first()
		except:
			return jsonify({'message': 'Token is invalid!'}), 401

		return f(current_user, *args, **kwargs)

	return decorated

@app.route('/user', methods=['GET'])
@token_required
def get_all_users(current_user):
	if not current_user.admin:
		return jsonify({'message': 'Cannot perform that function!'})

	users = User.query.all()
	output = []

	for user in users:
		user_data = {}
		user_data['public_id'] = user.public_id
		user_data['name'] = user.name
		user_data['password'] = user.password
		user_data['admin'] = user.admin
		output.append(user_data)

	return jsonify({'users':output})

@app.route('/user', methods=['POST'])
@token_required
def create_admin(current_user):
	data = request.get_json()
	hashed_password = generate_password_hash(data['password'], method='sha256')
	new_user = User(public_id = str(uuid.uuid4()), name=data['name'], password=hashed_password, admin=True)
	db.session.add(new_user)
	db.session.commit()

	return jsonify({'message':'New User Created!'})

@app.route('/user', methods=['POST'])
@token_required
def create_user(current_user):

	data = request.get_json()
	hashed_password = generate_password_hash(data['password'], method='sha256')
	new_user = User(public_id = str(uuid.uuid4()), name=data['name'], password=hashed_password, admin=False)
	db.session.add(new_user)
	db.session.commit()

	return jsonify({'message':'New User Created!'})

@app.route('/user/<public_id>', methods=['PUT'])
@token_required
def promote_user(current_user, public_id):
	if not current_user.admin:
		return jsonify({'message': 'Cannot perform that function!'})

	user = User.query.filter_by(public_id=public_id).first()

	if not user:
		return jsonify({'message':'No user found!'})
	
	user.admin = True
	db.session.commit()

	return jsonify({'message': 'User have been promoted!'})

@app.route('/user/<public_id>', methods=['DELETE'])
@token_required
def delete_user(current_user, public_id):
	if not current_user.admin:
		return jsonify({'message': 'Cannot perform that function!'})

	user = User.query.filter_by(public_id=public_id).first()

	if not user:
		return jsonify({'message':'No user found!'})
	
	db.session.delete(user)
	db.session.commit()

	return jsonify({'message' : 'User have been deleted!'})

@app.route('/login')
def login():
	auth = request.authorization
	
	if not auth or not auth.username or not auth.password:
		return make_response('Could not verify', 401, {'WWW-Authenticate': 'Basic realm="Login required!"'})

	user = User.query.filter_by(name=auth.username).first()

	if not user:
		return make_response('Could not verify', 401, {'WWW-Authenticate': 'Basic realm="Login required!"'})

	if check_password_hash(user.password, auth.password):
		token = jwt.encode({'public_id': user.public_id, 'exp':datetime.datetime.utcnow() + datetime.timedelta(minutes=10)}, app.config['SECRET_KEY'])
		return jsonify({'token':token.decode('UTF-8')})
	
	return make_response('Could not verify', 401, {'WWW-Authenticate': 'Basic realm="Login required!"'})

@app.route('/shape', methods=['GET'])
@token_required
def get_all_shapes(current_user):
	if not current_user.admin:
		return jsonify({'message': 'Cannot perform that function!'})

	shapes = Shape.query.filter_by(user_id=current_user.id).all()
	output = []

	for shape in shapes:
		shape_data = {}
		shape_data['id'] = shape.id
		shape_data['shape_name'] = shape.shape_name
		shape_data['complete'] = shape.complete
		output.append(shape_data)

	return jsonify({'shapes' : output})

@app.route('/shape/<shape_id>', methods=['GET'])
@token_required
def check_available_shape(current_user, shape_id):
	shape = Shape.query.filter_by(id=todo_id, user_id=current_suer.id, complete=True).first()

	if not shape:
		return jsonify({'message': 'The Shape Is Not Available!'})

	shape_data = {}
	shape_data['id'] = shape.id
	shape_data['shape_name'] = shape.shape_name
	shape_data['complete'] = shape.complete

	return jsonify(shape_data)

@app.route('/shape', methods=['POST'])
@token_required
def create_shape(current_user):
	if not current_user.admin:
		return jsonify({'message': 'Cannot perform that function!'})

	data = request.get_json()
	new_shape = Shape(shape_name=data['shape_name'], complete=True, user_id=current_user.id)
	db.session.add(new_shape)
	db.session.commit()

	return jsonify({'message' : 'Shape created!'})

@app.route('/shape', methods=['POST'])
@token_required
def request_shape(current_user):
	data = request.get_json()
	new_shape = Shape(shape_name=data['shape_name'], complete=False, user_id=current_user.id)
	db.session.add(new_shape)
	db.session.commit()

	return jsonify({'message' : 'Shape has requested!'})

@app.route('/shape/<shape_id>', methods=['PUT'])
@token_required
def complete_shape(current_user, todo_id):
	if not current_user.admin:
		return jsonify({'message': 'Cannot perform that function!'})

	shape = Shape.query.filter_by(id=shape_id, user_id=current_suer.id).first()

	if not shape:
		return jsonify({'message': 'No Shape found!'})

	shape.complete = True
	db.session.commit()

	return jsonify({'message': 'Shape is Avaliable Now!'})

@app.route('/shape/<shape_id>', methods=['DELETE'])
@token_required
def delete_shape(current_user, shape_id):
	if not current_user.admin:
		return jsonify({'message': 'Cannot perform that function!'})

	shape = Shape.query.filter_by(id=shape_id, user_id=current_user.id).first()

	if not shape:
		return jsonify({'message': 'No shape found!'})

	db.session.delete(shape)
	db.session.commit()

	return jsonify({'message': 'Shape has been deleted!'})

if __name__ == '__main__':
	app.run(debug=True)